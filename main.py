from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QMenu, QMenuBar, QAction, QActionGroup, QTabWidget,
                             QSplitter, QGridLayout, QHBoxLayout, QVBoxLayout, QTreeWidget, QTreeWidgetItem,
                             QTreeWidgetItemIterator, QStatusBar, QDockWidget, QPushButton)
from PyQt5.QtGui import QIcon, QFont, QColor, QImage
from PyQt5.QtCore import Qt, pyqtSignal, QCoreApplication, QSize
from PyQt5.Qsci import *
from editor.editor import Editor
from editor.projecttree import ProjectTree
from editor.settings import settings
import sys


class EditorWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.resize(settings().value("MainWindow/size") or QSize(1280, 720))
        self.setWindowTitle("untitled")
        if int(settings().value("MainWindow/maximized")): self.showMaximized()


        self.setCentralWidget(QWidget())
        self.setMenuBar(QMenuBar())
        self.menubar()
        self.setStatusBar(QStatusBar())
        self.centralWidget().setLayout(QHBoxLayout())
        self.centralWidget().layout().setSpacing(0)
        self.centralWidget().layout().setContentsMargins(0, 0, 0, 0)

        self.splitter = QSplitter()
        self.centralWidget().layout().addWidget(self.splitter)

        self.treeWidget = ProjectTree(self.splitter)
        self.splitter.addWidget(self.treeWidget)

        self.tabwidget = QTabWidget()
        self.tabwidget.setMovable(True)
        self.tabwidget.setTabBarAutoHide(True) # Dikkat!
        self.tabwidget.setTabsClosable(True)
        self.tabwidget.setElideMode(Qt.ElideRight)
        self.tabwidget.setDocumentMode(True) # Dikkat
        self.tabwidget.tabBar().tabCloseRequested.connect(self.tabwidget.removeTab)
        self.splitter.addWidget(self.tabwidget)

        self.edit = Editor()
        self.tabwidget.addTab(self.edit, "abc.py")


        self.splitter.setSizes((int(settings().value("Sizes/splitter0") or self.splitter.sizeHint().width() * .2),
                                int(settings().value("Sizes/splitter1") or self.splitter.sizeHint().width() * .8)))


    def menubar(self):
        #menüler
        self.fileMenu = QMenu(self.tr("Dosya"))
        self.newFileAction = QAction(self.tr("New File"))
        self.fileMenu.addAction(self.newFileAction)
        self.openFileAction = QAction(self.tr("Open File..."))
        self.fileMenu.addAction(self.openFileAction)
        self.openFolderAction = QAction(self.tr("Open Folder..."))
        self.fileMenu.addAction(self.openFolderAction)
        self.openRecentFileAction = QMenu(self.tr("Open Recent..."))
        self.fileMenu.addMenu(self.openRecentFileAction)
        self.reopenEncodingAction = QMenu(self.tr("Reopen with Encoding"))
        self.fileMenu.addMenu(self.reopenEncodingAction)
        self.newViewFileAction = QAction(self.tr("New View into File"))
        self.fileMenu.addAction(self.newViewFileAction)
        self.saveFileAction = QAction(self.tr("Save"))
        self.fileMenu.addAction(self.saveFileAction)
        self.saveFileEncodingAction = QMenu(self.tr("Save with Encoding"))
        self.fileMenu.addMenu(self.saveFileEncodingAction)
        self.saveAsAction = QAction(self.tr("Save As..."))
        self.fileMenu.addAction(self.saveAsAction)
        self.saveAllAction = QAction(self.tr("Save All"))
        self.fileMenu.addAction(self.saveAllAction)
        self.fileMenu.addSeparator()
        self.newWindowAction = QAction(self.tr("New Window"))
        self.fileMenu.addAction(self.newWindowAction)
        self.closeWindowAction = QAction(self.tr("Close Window"))
        self.fileMenu.addAction(self.closeWindowAction)
        self.fileMenu.addSeparator()
        self.closeFileAction = QAction(self.tr("Close File"))
        self.fileMenu.addAction(self.closeFileAction)
        self.revertFileAction = QAction(self.tr("Revert File"))
        self.fileMenu.addAction(self.revertFileAction)
        self.closeAllFilesAction = QAction(self.tr("Close All File"))
        self.fileMenu.addAction(self.closeAllFilesAction)
        self.fileMenu.addSeparator()
        self.exitAction = QAction(self.tr("Exit"))
        self.fileMenu.addAction(self.exitAction)
        self.menuBar().addMenu(self.fileMenu)

        self.editMenu = QMenu(self.tr("Düzenle"))
        self.undoAction = QAction(self.tr("Undo"))
        self.editMenu.addAction(self.undoAction)
        self.redoAction = QAction(self.tr("Redo"))
        self.editMenu.addAction(self.redoAction)
        self.undoSelectionActionMenu = QMenu(self.tr("Undo Selection"))
        self.editMenu.addMenu(self.undoSelectionActionMenu)
        self.editMenu.addSeparator()
        self.copyAction = QAction(self.tr("Copy"))
        self.editMenu.addAction(self.copyAction)
        self.cutAction = QAction(self.tr("Cut"))
        self.editMenu.addAction(self.cutAction)
        self.pasteAction = QAction(self.tr("Paste"))
        self.editMenu.addAction(self.pasteAction)
        self.pasteIndentAction = QAction(self.tr("Paste and Indent"))
        self.editMenu.addAction(self.pasteIndentAction)
        self.pasteHistoryAction = QAction(self.tr("Paste from History"))
        self.editMenu.addAction(self.pasteHistoryAction)
        self.editMenu.addSeparator()
        self.lineActionMenu = QMenu(self.tr("Line"))
        self.editMenu.addMenu(self.lineActionMenu)
        self.commentActionMenu = QMenu(self.tr("Comment"))
        self.editMenu.addMenu(self.commentActionMenu)
        self.textActionMenu = QMenu(self.tr("Text"))
        self.editMenu.addMenu(self.textActionMenu)
        self.tagActionMenu = QMenu(self.tr("Tag"))
        self.editMenu.addMenu(self.tagActionMenu)
        self.markActionMenu = QMenu(self.tr("Mark"))
        self.editMenu.addMenu(self.markActionMenu)
        self.codeFoldingActionMenu = QMenu(self.tr("Code Folding"))
        self.editMenu.addMenu(self.codeFoldingActionMenu)
        self.convertCaseActionMenu = QMenu(self.tr("Convert Case"))
        self.editMenu.addMenu(self.convertCaseActionMenu)
        self.wrapActionMenu = QMenu(self.tr("Wrap"))
        self.editMenu.addMenu(self.wrapActionMenu)
        self.showCompletionsAction = QAction(self.tr("Show Completion"))
        self.editMenu.addAction(self.showCompletionsAction)
        self.editMenu.addSeparator()
        self.sortLinesAction = QAction(self.tr("Sort Lines"))
        self.editMenu.addAction(self.sortLinesAction)
        self.sortLinesAction2 = QAction(self.tr("Sort Lines (Case Sensitive)"))
        self.editMenu.addAction(self.sortLinesAction2)
        self.permuteLinesAction = QMenu(self.tr("Permute Lines"))
        self.editMenu.addMenu(self.permuteLinesAction)
        self.permuteSelectionsAction = QMenu(self.tr("Permute Selections"))
        self.editMenu.addMenu(self.permuteSelectionsAction)
        self.menuBar().addMenu(self.editMenu)

        self.selectionMenu = QMenu(self.tr("Selection"))
        self.splitIntoAction = QAction(self.tr("Split into Lines"))
        self.selectionMenu.addAction(self.splitIntoAction)
        self.addPreviousAction = QAction(self.tr("Add Previous Line"))
        self.selectionMenu.addAction(self.addPreviousAction)
        self.addNextAction = QAction(self.tr("Add Next Line"))
        self.selectionMenu.addAction(self.addNextAction)
        self.singleSelectionAction = QAction(self.tr("Single Selection"))
        self.selectionMenu.addAction(self.singleSelectionAction)
        self.invertSelectionAction = QAction(self.tr("Invert Selection"))
        self.selectionMenu.addAction(self.invertSelectionAction)
        self.selectionMenu.addSeparator()
        self.selectAllAction = QAction(self.tr("Select All"))
        self.selectionMenu.addAction(self.selectAllAction)
        self.expandSelectionLineAction = QAction(self.tr("Expand Selection to Line"))
        self.selectionMenu.addAction(self.expandSelectionLineAction)
        self.expandSelectionWordAction = QAction(self.tr("Expand Selection to Word"))
        self.selectionMenu.addAction(self.expandSelectionWordAction)
        self.expandSelectionParagraphAction = QAction(self.tr("Expand Selection to Paragraph"))
        self.selectionMenu.addAction(self.expandSelectionParagraphAction)
        self.expandSelectionScopeAction = QAction(self.tr("Expand Selection to Scope"))
        self.selectionMenu.addAction(self.expandSelectionScopeAction)
        self.expandSelectionBracketsAction = QAction(self.tr("Expand Selection to Brackets"))
        self.selectionMenu.addAction(self.expandSelectionBracketsAction)
        self.expandSelectionIndentationAction = QAction(self.tr("Expand Selection to Indentation"))
        self.selectionMenu.addAction(self.expandSelectionIndentationAction)
        self.expandSelectionTagAction = QAction(self.tr("Expand Selection to Tag"))
        self.selectionMenu.addAction(self.expandSelectionTagAction)
        self.menuBar().addMenu(self.selectionMenu)

        self.findMenu = QMenu(self.tr("Find"))
        self.findAction = QAction(self.tr("Find..."))
        self.findMenu.addAction(self.findAction)
        self.findNextAction = QAction(self.tr("Find Next"))
        self.findMenu.addAction(self.findNextAction)
        self.findPreviousAction = QAction(self.tr("Find Previous"))
        self.findMenu.addAction(self.findPreviousAction)
        self.incrementalAction = QAction(self.tr("Incremental Find"))
        self.findMenu.addAction(self.incrementalAction)
        self.findMenu.addSeparator()
        self.replaceAction = QAction(self.tr("Replace"))
        self.findMenu.addAction(self.replaceAction)
        self.replaceNextAction = QAction(self.tr("Replace Next"))
        self.findMenu.addAction(self.replaceNextAction)
        self.findMenu.addSeparator()
        self.quickFindAction = QAction(self.tr("Quick Find"))
        self.findMenu.addAction(self.quickFindAction)
        self.quickFindAllAction = QAction(self.tr("Quick Find All"))
        self.findMenu.addAction(self.quickFindAllAction)
        self.quickAddAction = QAction(self.tr("Quick Add Next"))
        self.findMenu.addAction(self.quickAddAction)
        self.quickSkipAction = QAction(self.tr("Quick Skip Next"))
        self.findMenu.addAction(self.quickSkipAction)
        self.findMenu.addSeparator()
        self.selectionFindAction = QAction(self.tr("Use Selection for Find"))
        self.findMenu.addAction(self.selectionFindAction)
        self.selectionReplaceAction = QAction(self.tr("Use Selection for Replace"))
        self.findMenu.addAction(self.selectionReplaceAction)
        self.findMenu.addSeparator()
        self.findFilesAction = QAction(self.tr("Find in Files..."))
        self.findMenu.addAction(self.findFilesAction)
        self.findResultActionMenu  = QMenu(self.tr("Find Result"))
        self.findMenu.addMenu(self.findResultActionMenu)
        self.menuBar().addMenu(self.findMenu)

        self.viewMenu = QMenu(self.tr("View"))
        self.sideBarActionMenu = QMenu(self.tr("Side Bar"))
        self.viewMenu.addMenu(self.sideBarActionMenu)
        self.hideMinimapAction = QAction(self.tr("Hide Minimap"))
        self.viewMenu.addAction(self.hideMinimapAction)
        self.hideTabsAction = QAction(self.tr("Hide Tabs"))
        self.viewMenu.addAction(self.hideTabsAction)
        self.hideStatusBarAction = QAction(self.tr("Hide Status Bar"))
        self.viewMenu.addAction(self.hideStatusBarAction)
        self.hideMenuAction = QAction(self.tr("Hide Menu"))
        self.viewMenu.addAction(self.hideMenuAction)
        self.showConsoleAction = QAction(self.tr("Show Console"))
        self.viewMenu.addAction(self.showConsoleAction)
        self.viewMenu.addSeparator()
        self.enterFullscreenAction = QAction(self.tr("Enter Full Screen"))
        self.viewMenu.addAction(self.enterFullscreenAction)
        self.enterDistractionAction = QAction(self.tr("Enter Distraction Free Mode"))
        self.viewMenu.addAction(self.enterDistractionAction)
        self.viewMenu.addSeparator()
        self.layoutActionMenu = QMenu(self.tr("Layout"))
        self.viewMenu.addMenu(self.layoutActionMenu)
        self.groupsActionMenu = QMenu(self.tr("Groups"))
        self.viewMenu.addMenu(self.groupsActionMenu)
        self.focusGroupActionMenu = QMenu(self.tr("Focus Group"))
        self.viewMenu.addMenu(self.focusGroupActionMenu)
        self.moveFileGroupActionMenu = QMenu(self.tr("Move File to Group"))
        self.viewMenu.addMenu(self.moveFileGroupActionMenu)
        self.viewMenu.addSeparator()
        self.syntaxActionMenu = QMenu(self.tr("Syntax"))
        self.viewMenu.addMenu(self.syntaxActionMenu)
        self.indentationActionMenu = QMenu(self.tr("Indentation"))
        self.viewMenu.addMenu(self.indentationActionMenu)
        self.lineEndingsActionMenu = QMenu(self.tr("Line Endings"))
        self.viewMenu.addMenu(self.lineEndingsActionMenu)
        self.viewMenu.addSeparator()
        self.wordWrapAction = QAction(self.tr("Word Wrap"))
        self.viewMenu.addAction(self.wordWrapAction)
        self.wordWrapColumnActionMenu = QMenu(self.tr("Word Wrap Column"))
        self.viewMenu.addMenu(self.wordWrapColumnActionMenu)
        self.rulerActionMenu = QMenu(self.tr("Ruler"))
        self.viewMenu.addMenu(self.rulerActionMenu)
        self.viewMenu.addSeparator()
        self.spellCheckAction = QAction(self.tr("Spell Check"))
        self.viewMenu.addAction(self.spellCheckAction)
        self.nextMisspellingAction = QAction(self.tr("Next Misspelling"))
        self.viewMenu.addAction(self.nextMisspellingAction)
        self.prevMisspellingAction = QAction(self.tr("Prev Misspelling"))
        self.viewMenu.addAction(self.prevMisspellingAction)
        self.dictionaryActionMenu = QMenu(self.tr("Dictionary"))
        self.viewMenu.addMenu(self.dictionaryActionMenu)
        self.menuBar().addMenu(self.viewMenu)

        self.gotoMenu = QMenu(self.tr("Goto"))
        self.gotoAnythingAction = QAction(self.tr("Goto Anything..."))
        self.gotoMenu.addAction(self.gotoAnythingAction)
        self.gotoMenu.addSeparator()
        self.gotoSymbolAction = QAction(self.tr("Goto Symbol..."))
        self.gotoMenu.addAction(self.gotoSymbolAction)
        self.gotoSymbolProjectAction = QAction(self.tr("Goto Symbol in Project..."))
        self.gotoMenu.addAction(self.gotoSymbolProjectAction)
        self.gotoDefinitionAction = QAction(self.tr("Goto Definition..."))
        self.gotoMenu.addAction(self.gotoDefinitionAction)
        self.gotoReferenceAction = QAction(self.tr("Goto Reference..."))
        self.gotoMenu.addAction(self.gotoReferenceAction)
        self.gotoLineAction = QAction(self.tr("Goto Line..."))
        self.gotoMenu.addAction(self.gotoLineAction)
        self.gotoMenu.addSeparator()
        self.jumpBackAction = QAction(self.tr("Jump Back"))
        self.gotoMenu.addAction(self.jumpBackAction)
        self.jumpForwardAction = QAction(self.tr("Jump Forward"))
        self.gotoMenu.addAction(self.jumpForwardAction)
        self.gotoMenu.addSeparator()
        self.switchFileActionMenu = QMenu(self.tr("Switch File"))
        self.gotoMenu.addMenu(self.switchFileActionMenu)
        self.gotoMenu.addSeparator()
        self.scrollActionMenu = QMenu(self.tr("Scroll"))
        self.gotoMenu.addMenu(self.scrollActionMenu)
        self.bookmarksActionMenu = QMenu(self.tr("Bookmarks"))
        self.gotoMenu.addMenu(self.bookmarksActionMenu)
        self.gotoMenu.addSeparator()
        self.jumpMatchingBracketAction = QAction(self.tr("Jump to Matching Bracket"))
        self.gotoMenu.addAction(self.jumpMatchingBracketAction)
        self.menuBar().addMenu(self.gotoMenu)

        self.toolsMenu = QMenu(self.tr("Tools"))
        self.commandPaletteAction = QAction(self.tr("Command Palette..."))
        self.toolsMenu.addAction(self.commandPaletteAction)
        self.snippetsAction = QAction(self.tr("Snippets..."))
        self.toolsMenu.addAction(self.snippetsAction)
        self.toolsMenu.addSeparator()
        self.buildSystemActionMenu = QMenu(self.tr("Build System"))
        self.toolsMenu.addMenu(self.buildSystemActionMenu)
        self.buildAction = QAction(self.tr("Build"))
        self.toolsMenu.addAction(self.buildAction)
        self.buildWithAction = QAction(self.tr("Build With..."))
        self.toolsMenu.addAction(self.buildWithAction)
        self.cancelBuildAction = QAction(self.tr("Cancel Build"))
        self.toolsMenu.addAction(self.cancelBuildAction)
        self.buildResultsActionMenu = QMenu(self.tr("Build Results"))
        self.toolsMenu.addMenu(self.buildResultsActionMenu)
        self.saveAllBuildAction = QAction(self.tr("Save All on Build"))
        self.toolsMenu.addAction(self.saveAllBuildAction)
        self.toolsMenu.addSeparator()
        self.recordMacroAction = QAction(self.tr("Record Macro"))
        self.toolsMenu.addAction(self.recordMacroAction)
        self.playbackMacroAction = QAction(self.tr("Playback Macro"))
        self.toolsMenu.addAction(self.playbackMacroAction)
        self.saveMacroAction = QAction(self.tr("Save Macro..."))
        self.toolsMenu.addAction(self.saveMacroAction)
        self.macrosActionMenu = QMenu(self.tr("Macros"))
        self.toolsMenu.addMenu(self.macrosActionMenu)
        self.toolsMenu.addSeparator()
        self.developerActionMenu = QMenu(self.tr("Developer"))
        self.toolsMenu.addMenu(self.developerActionMenu)
        self.menuBar().addMenu(self.toolsMenu)

        self.projectMenu = QMenu(self.tr("Project"))
        self.openProjectAction = QAction(self.tr("Open Project..."))
        self.projectMenu.addAction(self.openProjectAction)
        self.switchProjectAction = QAction(self.tr("Switch Project..."))
        self.projectMenu.addAction(self.switchProjectAction)
        self.quickSwitchAction = QAction(self.tr("Quick Switch Project..."))
        self.projectMenu.addAction(self.quickSwitchAction)
        self.openRecentProjectActionMenu = QMenu(self.tr("Open Recent"))
        self.projectMenu.addMenu(self.openRecentProjectActionMenu)
        self.projectMenu.addSeparator()
        self.saveProjectAction = QAction(self.tr("Save Project As..."))
        self.projectMenu.addAction(self.saveProjectAction)
        self.closeProjectAction = QAction(self.tr("Close Project"))
        self.projectMenu.addAction(self.closeProjectAction)
        self.editProjectAction = QAction(self.tr("Edit Project"))
        self.projectMenu.addAction(self.editProjectAction)
        self.projectMenu.addSeparator()
        self.newWorkspaceAction = QAction(self.tr("New Workspace for Project"))
        self.projectMenu.addAction(self.newWorkspaceAction)
        self.saveWorkspaceAction = QAction(self.tr("Save Workspace As..."))
        self.projectMenu.addAction(self.saveWorkspaceAction)
        self.projectMenu.addSeparator()
        self.addFolderAction = QAction(self.tr("Add Folder to Project..."))
        self.projectMenu.addAction(self.addFolderAction)
        self.removeAllFoldersAction = QAction(self.tr("Remove all Folders from Project"))
        self.projectMenu.addAction(self.removeAllFoldersAction)
        self.refreshFoldersAction = QAction(self.tr("Refresh Folders"))
        self.projectMenu.addAction(self.refreshFoldersAction)
        self.menuBar().addMenu(self.projectMenu)

        self.preferencesMenu = QMenu(self.tr("Preferences"))
        self.browsePackagesAction = QAction(self.tr("Browse Packages"))
        self.preferencesMenu.addSeparator()
        self.preferencesMenu.addAction(self.browsePackagesAction)
        self.settingsAction = QAction(self.tr("Settings"))
        self.preferencesMenu.addAction(self.settingsAction)
        self.settingsSyntaxAction = QAction(self.tr("Settings - Syntax Specific"))
        self.preferencesMenu.addAction(self.settingsSyntaxAction)
        self.settingsDistractionAction = QAction(self.tr("Settings - Distraction Free"))
        self.preferencesMenu.addAction(self.settingsDistractionAction)
        self.preferencesMenu.addSeparator()
        self.keyBindingsAction = QAction(self.tr("Key Bindings"))
        self.preferencesMenu.addAction(self.keyBindingsAction)
        self.preferencesMenu.addSeparator()
        self.colorSchemeAction = QAction(self.tr("Color Scheme..."))
        self.preferencesMenu.addAction(self.colorSchemeAction)
        self.themeAction = QAction(self.tr("Theme..."))
        self.preferencesMenu.addAction(self.themeAction)

        self.fontActionMenu =  QMenu(self.tr("Font"))
        self.largerAction = QAction(self.tr("Larger"))
        self.fontActionMenu.addAction(self.largerAction)
        self.smallerAction = QAction(self.tr("Smaller"))
        self.fontActionMenu.addAction(self.smallerAction)
        self.fontActionMenu.addSeparator()
        self.resetAction = QAction(self.tr("Reset"))
        self.fontActionMenu.addAction(self.resetAction)
        self.preferencesMenu.addMenu(self.fontActionMenu)

        self.packageSettingsAction = QAction(self.tr("Package Settings"))
        self.preferencesMenu.addAction(self.packageSettingsAction)

        self.packageControlAction =  QAction(self.tr("Package Control"))
        self.preferencesMenu.addAction(self.packageControlAction)
        self.menuBar().addMenu(self.preferencesMenu)

        self.debugMenu = QMenu(self.tr("Debug"))
        self.startDebuggingAction = QAction(self.tr("Start Debugging"))
        self.debugMenu.addAction(self.startDebuggingAction)
        self.startWithDebuggingAction = QAction(self.tr("Start Without Debugging"))
        self.debugMenu.addAction(self.startWithDebuggingAction)
        self.stopDebuggingAction = QAction(self.tr("Stop Debugging"))
        self.debugMenu.addAction(self.stopDebuggingAction)
        self.restartDebuggingAction = QAction(self.tr("Restart Debugging"))
        self.debugMenu.addAction(self.restartDebuggingAction)
        self.debugMenu.addSeparator()
        self.openConfigureAction = QAction(self.tr("Open Configurations"))
        self.debugMenu.addAction(self.openConfigureAction)
        self.addConfigureAction = QAction(self.tr("Add Configuration..."))
        self.debugMenu.addAction(self.addConfigureAction)
        self.debugMenu.addSeparator()
        self.stepOverAction = QAction(self.tr("Step Over"))
        self.debugMenu.addAction(self.stepOverAction)
        self.stepIntoAction = QAction(self.tr("Step Into"))
        self.debugMenu.addAction(self.stepIntoAction)
        self.stepOutAction = QAction(self.tr("Step Out"))
        self.debugMenu.addAction(self.stepOutAction)
        self.continueAction = QAction(self.tr("Continue"))
        self.debugMenu.addAction(self.continueAction)
        self.debugMenu.addSeparator()
        self.toggleBreakpointAction = QAction(self.tr("Toggle Breakpoint"))
        self.debugMenu.addAction(self.toggleBreakpointAction)
        self.newBreakpointActionMenu = QMenu(self.tr("New Breakpoint"))
        self.debugMenu.addMenu(self.newBreakpointActionMenu)
        self.debugMenu.addSeparator()
        self.enableBreakpoints = QAction(self.tr("Enable All Breakpoints"))
        self.debugMenu.addAction(self.enableBreakpoints)
        self.disableBreakpoints = QAction(self.tr("Disable All Breakpoints"))
        self.debugMenu.addAction(self.disableBreakpoints)
        self.removeBreakpoints = QAction(self.tr("Remove All Breakpoints"))
        self.debugMenu.addAction(self.removeBreakpoints)
        self.debugMenu.addSeparator()
        self.installAdditionalAction = QAction(self.tr("Install Additional Debuggers..."))
        self.debugMenu.addAction(self.installAdditionalAction)
        self.menuBar().addMenu(self.debugMenu)

        self.terminalMenu = QMenu(self.tr("Terminal"))
        self.newTerminalAction = QAction(self.tr("New Terminal"))
        self.terminalMenu.addAction(self.newTerminalAction)
        self.splitTerminalAction = QAction(self.tr("Split Terminal"))
        self.terminalMenu.addAction(self.splitTerminalAction)
        self.terminalMenu.addSeparator()
        self.runTaskAction = QAction(self.tr("Run Task..."))
        self.terminalMenu.addAction(self.runTaskAction)
        self.runBuildTaskAction = QAction(self.tr("Run Build Task..."))
        self.terminalMenu.addAction(self.runBuildTaskAction)
        self.runActiveFileAction = QAction(self.tr("Run Active File"))
        self.terminalMenu.addAction(self.runActiveFileAction)
        self.runSelectedTextAction = QAction(self.tr("Run Selected Text"))
        self.terminalMenu.addAction(self.runSelectedTextAction)
        self.terminalMenu.addSeparator()
        self.showRunningTaskAction = QAction(self.tr("Show Running Task..."))
        self.terminalMenu.addAction(self.showRunningTaskAction)
        self.restartRunningTaskAction = QAction(self.tr("Restart Running Task..."))
        self.terminalMenu.addAction(self.restartRunningTaskAction)
        self.terminateTastAction = QAction(self.tr("Terminate Task..."))
        self.terminalMenu.addAction(self.terminateTastAction)
        self.terminalMenu.addSeparator()
        self.configureTasksAction = QAction(self.tr("Configure Tasks..."))
        self.terminalMenu.addAction(self.configureTasksAction)
        self.configureDetailAction = QAction(self.tr("Configure Detail Build Task..."))
        self.terminalMenu.addAction(self.configureDetailAction)
        self.menuBar().addMenu(self.terminalMenu)

        self.helpMenu = QMenu(self.tr("Help"))
        self.documentationAction = QAction(self.tr("Documentation"))
        self.helpMenu.addAction(self.documentationAction)
        self.twitterAction =  QAction(self.tr("Twitter"))
        self.helpMenu.addAction(self.twitterAction)
        self.helpMenu.addSeparator()
        self.indexAction = QAction(self.tr("Indexing Status..."))
        self.helpMenu.addAction(self.indexAction)
        self.helpMenu.addSeparator()
        self.purchaseAction = QAction(self.tr("Purchase License"))
        self.helpMenu.addAction(self.purchaseAction)
        self.enterAction = QAction(self.tr("Enter License"))
        self.helpMenu.addAction(self.enterAction)
        self.helpMenu.addSeparator()
        self.checkAction = QAction(self.tr("Check for Updates..."))
        self.helpMenu.addAction(self.checkAction)
        self.changelogAction = QAction(self.tr("Changelog..."))
        self.helpMenu.addAction(self.changelogAction)
        self.aboutAction = QAction(self.tr("About Untitled Editor"))
        self.helpMenu.addAction(self.aboutAction)
        self.menuBar().addMenu(self.helpMenu)

    def setWindowTitle(self, title):
        super().setWindowTitle(title + " - " + "Untitled Editor")

    def closeEvent(self, *args, **kwargs):
        settings().setValue("Sizes/splitter0", self.treeWidget.width())
        settings().setValue("Sizes/splitter1", self.tabwidget.width())
        settings().setValue("MainWindow/maximized", int(self.isMaximized()))
        settings().setValue("MainWindow/size", self.size())

        settings().sync()

    def retranslateui(self):
        pass





app = QApplication(sys.argv)
QCoreApplication.setAttribute(Qt.AA_UseHighDpiPixmaps)
QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling)
window = EditorWindow()
window.show()
sys.exit(app.exec_())