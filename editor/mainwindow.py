from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QMenu, QMenuBar, QAction, QActionGroup, QTabWidget,
                             QSplitter, QGridLayout, QHBoxLayout, QVBoxLayout, QTreeWidget, QTreeWidgetItem,
                             QTreeWidgetItemIterator, QStatusBar, QDockWidget, QPushButton)
from PyQt5.QtGui import QIcon, QFont, QColor, QKeySequence
from PyQt5.QtCore import Qt, pyqtSignal, QSize
from PyQt5.Qsci import *
from editor.editor import Editor
from editor.projecttree import ProjectTree
from editor.settings import settings
from editor.tabwidget import TabWidget
import sys


class EditorWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.resize(settings().value("MainWindow/size") or QSize(1280, 720))
        self.setWindowTitle("untitled")
        if int(settings().value("MainWindow/maximized") or 0): self.showMaximized()


        self.setCentralWidget(QWidget())
        self.setMenuBar(QMenuBar())
        self.setStatusBar(QStatusBar())
        self.centralWidget().setLayout(QHBoxLayout())
        self.centralWidget().layout().setSpacing(0)
        self.centralWidget().layout().setContentsMargins(0, 0, 0, 0)

        self.splitter = QSplitter()
        self.centralWidget().layout().addWidget(self.splitter)

        self.projectTree = ProjectTree(self)
        # self.projectTree.hide()
        self.splitter.addWidget(self.projectTree)

        self.tabwidget = TabWidget(self)
        self.splitter.addWidget(self.tabwidget)


        self.splitter.setSizes((int(settings().value("Sizes/splitter0") or self.splitter.sizeHint().width() * .2),
                                int(settings().value("Sizes/splitter1") or self.splitter.sizeHint().width() * .8)))


        #men√ºler
        self.fileMenu = QMenu(self.tr("File"))
        self.newFileActionMenu = QMenu(self.tr("New"))
        self.newPythonFileAction = QAction(self.tr("Python File"), icon=QIcon(":/img/text-python.svg"))
        self.newFileActionMenu.addAction(self.newPythonFileAction)
        self.newDirectoryAction = QAction(self.tr("Directory"), icon=QIcon(":/img/folder.svg"))
        self.newFileActionMenu.addAction(self.newDirectoryAction)
        self.newPythonPackageAction = QAction(self.tr("Python Package"), icon=QIcon(":/img/folder-python.svg"))
        self.newFileActionMenu.addAction(self.newPythonPackageAction)
        self.newFileActionMenu.addSeparator()
        self.newHtmlFileAction = QAction(self.tr("Html File"), icon=QIcon(":/img/text-html.svg"))
        self.newFileActionMenu.addAction(self.newHtmlFileAction)
        self.newCssFileAction = QAction(self.tr("Css File"), icon=QIcon(":/img/text-css.svg"))
        self.newFileActionMenu.addAction(self.newCssFileAction)
        self.newJsFileAction = QAction(self.tr("JavaScript File"), icon=QIcon(":/img/text-javascript.svg"))
        self.newFileActionMenu.addAction(self.newJsFileAction)
        self.newJsonFileAction = QAction(self.tr("Json File"), icon=QIcon(":/img/text-plain.svg"))
        self.newFileActionMenu.addAction(self.newJsonFileAction)
        self.newXmlFileAction = QAction(self.tr("Xml File"), icon=QIcon(":/img/text-xml.svg"))
        self.newFileActionMenu.addAction(self.newXmlFileAction)
        self.newYamlFileAction = QAction(self.tr("Yaml File"), icon=QIcon(":/img/text-plain.svg"))
        self.newFileActionMenu.addAction(self.newYamlFileAction)
        self.newSqlFileAction = QAction(self.tr("Sqlite File"), icon=QIcon(":/img/text-sql.svg"))
        self.newFileActionMenu.addAction(self.newSqlFileAction)
        self.newMdFileAction = QAction(self.tr("Markdown File"), icon=QIcon(":/img/text-plain.svg"))
        self.newFileActionMenu.addAction(self.newMdFileAction)
        self.fileMenu.addMenu(self.newFileActionMenu)

        self.newProjectAction = QAction(self.tr("New Project"))
        self.fileMenu.addAction(self.newProjectAction)
        self.openFileAction = QAction(self.tr("Open File..."))
        self.openFileAction.setShortcut("Ctrl+O")
        self.fileMenu.addAction(self.openFileAction)
        self.openProjectAction = QAction(self.tr("Open Project..."))
        self.openProjectAction.setShortcut("Ctrl+Alt+O")
        self.fileMenu.addAction(self.openProjectAction)
        self.openRecentFileAction = QMenu(self.tr("Open Recent..."))
        self.fileMenu.addMenu(self.openRecentFileAction)
        self.saveFileAction = QAction(self.tr("Save"))
        self.saveFileAction.setShortcut("Ctrl+S")
        self.fileMenu.addAction(self.saveFileAction)
        self.saveAsAction = QAction(self.tr("Save As..."))
        self.saveAsAction.setShortcut("Ctrl+Alt+S")
        self.fileMenu.addAction(self.saveAsAction)
        self.saveAllAction = QAction(self.tr("Save All"))
        self.saveAllAction.setShortcut("Ctrl+Shift+S")
        self.fileMenu.addAction(self.saveAllAction)
        self.fileMenu.addSeparator()
        self.newWindowAction = QAction(self.tr("New Window"))
        self.fileMenu.addAction(self.newWindowAction)
        self.closeWindowAction = QAction(self.tr("Close Window"))
        self.fileMenu.addAction(self.closeWindowAction)
        self.fileMenu.addSeparator()
        self.closeFileAction = QAction(self.tr("Close File"))
        self.closeFileAction.setShortcut("Ctrl+W")
        self.fileMenu.addAction(self.closeFileAction)
        self.closeAllFilesAction = QAction(self.tr("Close All File"))
        self.fileMenu.addAction(self.closeAllFilesAction)
        self.fileMenu.addSeparator()
        self.exitAction = QAction(self.tr("Exit"))
        self.exitAction.setShortcut("Ctrl+Q")
        self.fileMenu.addAction(self.exitAction)
        self.menuBar().addMenu(self.fileMenu)

        self.editMenu = QMenu(self.tr("Edit"))
        self.undoAction = QAction(self.tr("Undo"))
        self.undoAction.setShortcut("Ctrl+Z")
        self.undoAction.setShortcutVisibleInContextMenu(True)
        self.editMenu.addAction(self.undoAction)
        self.redoAction = QAction(self.tr("Redo"))
        self.redoAction.setShortcut("Ctrl+Y")
        self.redoAction.setShortcutVisibleInContextMenu(True)
        self.editMenu.addAction(self.redoAction)
        self.editMenu.addSeparator()
        self.copyAction = QAction(self.tr("Copy"))
        self.copyAction.setShortcutVisibleInContextMenu(True)
        self.copyAction.setShortcut("Ctrl+C")
        self.editMenu.addAction(self.copyAction)
        self.cutAction = QAction(self.tr("Cut"))
        self.cutAction.setShortcut("Ctrl+X")
        self.cutAction.setShortcutVisibleInContextMenu(True)
        self.editMenu.addAction(self.cutAction)
        self.pasteAction = QAction(self.tr("Paste"))
        self.pasteAction.setShortcut("Ctrl+V")
        self.pasteAction.setShortcutVisibleInContextMenu(True)
        self.editMenu.addAction(self.pasteAction)
        self.editMenu.addSeparator()
        # self.wrapActionMenu = QMenu(self.tr("Wrap"))
        # self.editMenu.addMenu(self.wrapActionMenu)
        self.menuBar().addMenu(self.editMenu)

        self.findMenu = QMenu(self.tr("Find"))
        self.findAction = QAction(self.tr("Find..."))
        self.findAction.setShortcut("Ctrl+F")
        self.findMenu.addAction(self.findAction)
        self.findNextAction = QAction(self.tr("Find Next"))
        self.findNextAction.setShortcut("F3")
        self.findMenu.addAction(self.findNextAction)
        self.findPreviousAction = QAction(self.tr("Find Previous"))
        self.findPreviousAction.setShortcut("Shift+F3")
        self.findMenu.addAction(self.findPreviousAction)
        self.findMenu.addSeparator()
        self.replaceAction = QAction(self.tr("Replace"))
        self.replaceAction.setShortcut("Ctrl+H")
        self.findMenu.addAction(self.replaceAction)
        self.replaceNextAction = QAction(self.tr("Replace Next"))
        self.replaceNextAction.setShortcut("Ctrl+Shift+H")
        self.findMenu.addAction(self.replaceNextAction)
        self.menuBar().addMenu(self.findMenu)

        self.viewMenu = QMenu(self.tr("View"))
        self.layoutActionMenu = QMenu(self.tr("Layout"))
        self.viewMenu.addMenu(self.layoutActionMenu)
        self.groupsActionMenu = QMenu(self.tr("Groups"))
        self.viewMenu.addMenu(self.groupsActionMenu)
        self.focusGroupActionMenu = QMenu(self.tr("Focus Group"))
        self.viewMenu.addMenu(self.focusGroupActionMenu)
        self.moveFileGroupActionMenu = QMenu(self.tr("Move File to Group"))
        self.viewMenu.addMenu(self.moveFileGroupActionMenu)
        self.viewMenu.addSeparator()
        self.syntaxActionMenu = QMenu(self.tr("Syntax"))
        self.viewMenu.addMenu(self.syntaxActionMenu)
        self.indentationActionMenu = QMenu(self.tr("Indentation"))
        self.viewMenu.addMenu(self.indentationActionMenu)
        self.lineEndingsActionMenu = QMenu(self.tr("Line Endings"))
        self.viewMenu.addMenu(self.lineEndingsActionMenu)
        self.viewMenu.addSeparator()
        self.menuBar().addMenu(self.viewMenu)

        self.toolsMenu = QMenu(self.tr("Tools"))
        self.snippetsAction = QAction(self.tr("Snippets..."))
        self.toolsMenu.addAction(self.snippetsAction)
        self.toolsMenu.addSeparator()
        self.runAction = QAction(self.tr("Run"))
        self.runAction.setShortcut("F5")
        self.toolsMenu.addAction(self.runAction)
        self.runWithAction = QAction(self.tr("Run With..."))
        self.runWithAction.setShortcut("F6")
        self.toolsMenu.addAction(self.runWithAction)
        self.toolsMenu.addSeparator()
        self.recordMacroAction = QAction(self.tr("Record Macro"))
        self.toolsMenu.addAction(self.recordMacroAction)
        self.playbackMacroAction = QAction(self.tr("Playback Macro"))
        self.toolsMenu.addAction(self.playbackMacroAction)
        self.saveMacroAction = QAction(self.tr("Save Macro..."))
        self.toolsMenu.addAction(self.saveMacroAction)
        self.macrosActionMenu = QMenu(self.tr("Macros"))
        self.toolsMenu.addMenu(self.macrosActionMenu)
        self.toolsMenu.addSeparator()
        self.developerActionMenu = QMenu(self.tr("Developer"))
        self.toolsMenu.addMenu(self.developerActionMenu)
        self.menuBar().addMenu(self.toolsMenu)

        self.helpMenu = QMenu(self.tr("Help"))
        self.documentationAction = QAction(self.tr("Documentation"))
        self.helpMenu.addAction(self.documentationAction)
        self.helpMenu.addSeparator()
        self.helpMenu.addSeparator()
        self.purchaseAction = QAction(self.tr("Purchase License"))
        self.helpMenu.addAction(self.purchaseAction)
        self.enterAction = QAction(self.tr("Enter License"))
        self.helpMenu.addAction(self.enterAction)
        self.helpMenu.addSeparator()
        self.checkAction = QAction(self.tr("Check for Updates..."))
        self.helpMenu.addAction(self.checkAction)
        self.changelogAction = QAction(self.tr("Changelog..."))
        self.helpMenu.addAction(self.changelogAction)
        self.aboutAction = QAction(self.tr("About Untitled Editor"))
        self.helpMenu.addAction(self.aboutAction)
        self.menuBar().addMenu(self.helpMenu)

    def setWindowTitle(self, title):
        super().setWindowTitle(title + " - " + "Untitled Editor")

    def closeEvent(self, *args, **kwargs):
        settings().setValue("Sizes/splitter0", self.projectTree.width())
        settings().setValue("Sizes/splitter1", self.tabwidget.width())
        settings().setValue("MainWindow/maximized", int(self.isMaximized()))
        settings().setValue("MainWindow/size", self.size())

        settings().sync()

    def retranslateui(self):
        pass